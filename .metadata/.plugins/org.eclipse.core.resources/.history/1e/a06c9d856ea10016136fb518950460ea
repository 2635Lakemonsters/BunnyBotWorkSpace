
package org.usfirst.frc.team2635.robot;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
//import org.usfirst.frc.team2635.robot.commands.ExampleCommand;
import org.usfirst.frc.team2635.robot.subsystems.ExampleSubsystem;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
;
CANTalon motor;
DigitalInput nerfSwitch;
CANTalon flywheel;
Joystick joystick;
Button button;
Relay relay;
ShooterModes shooter;
final String defaultAuto = "Default";
final String customAuto = "My Auto";

	public static OI oi;

    Command autonomousCommand;
    SendableChooser chooser;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        chooser = new SendableChooser();
        chooser.addDefault("Default Auto", defaultAuto);
        chooser.addObject("My Auto", customAuto);
        SmartDashboard.putData("Auto choices", chooser);
        motor = new CANTalon(7);
        flywheel = new CANTalon(1);
        joystick = new Joystick(0);
        button = new JoystickButton(joystick,1);
        relay = new Relay(0);
        shooter = new ShooterModes();
        nerfSwitch = new DigitalInput(0);
    }
	
	/**
     * This function is called once each time the robot enters Disabled mode.
     * You can use it to reset any subsystem information you want to clear when
	 * the robot is disabled.
     */
    public void disabledInit(){

    }
	
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	/**
	 * This autonomous (along with the chooser code above) shows how to select between different autonomous modes
	 * using the dashboard. The sendable chooser code works with the Java SmartDashboard. If you prefer the LabVIEW
	 * Dashboard, remove all of the chooser code and uncomment the getString code to get the auto name from the text box
	 * below the Gyro
	 *
	 * You can add additional auto modes by adding additional commands to the chooser code above (like the commented example)
	 * or additional comparisons to the switch structure below with additional strings & commands.
	 */
    public void autonomousInit() {
        autonomousCommand = (Command) chooser.getSelected();
        
      /*String autoSelected = SmartDashboard.getString("Auto Selector", "Default");
		switch(autoSelected) {
		case "My Auto":
			autonomousCommand = new MyAutoCommand();
			break;
		case "Default Auto":
		default:
			autonomousCommand = new ExampleCommand();
			break;
		} */
    	
    	// schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
		// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        /*if(joystick.getRawButton(5)){
        	relay.set(Relay.Value.kForward);
        } 
        else if(joystick.getRawButton(4)){
        	relay.set(Relay.Value.kReverse);
        }
        else{
        	relay.set(Relay.Value.kOff);
        }*/
        shooter.modeChange(joystick.getRawButton(4),joystick.getRawButton(3),joystick.getRawButton(5));
        shooter.update(joystick.getRawButton(1));
        motor.set(shooter.getMotorSpeed()/2);
        flywheel.set(0.2);
        /*if (shooter.getMotorSpeed() == 1.0) {
        	relay.set(Relay.Value.kForward);
        } else if (shooter.getMotorSpeed() == 0.0) {
        	relay.set(Relay.Value.kOff);
        } else {
        	relay.set(Relay.Value.kOff);
        }*/
        
        shooter.setSwitch(nerfSwitch.get());
        
//        if (nerfSwitch.get()) {
//        	System.out.println("TRUE"); }
//        } else if (!nerfSwitch.get()){
//        	System.out.println("FALSE");
//        } else {
//        	System.out.println("OTHER?");
//        }
        
    
        	
       
      
        
        
      
    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
